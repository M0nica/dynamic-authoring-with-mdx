{"ast":null,"code":"var _jsxFileName = \"/Users/monica/Dev/migrating-to-mdx/context/ModeContext.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { MODES } from '../constants/modes';\nexport const ModeContext = createContext({});\nexport function ModeProvider({\n  children\n}) {\n  const {\n    0: mode,\n    1: setMode\n  } = useState(MODES.SLIDESHOW);\n  const router = useRouter();\n  const newMode = router.query.mode;\n  useEffect(() => {\n    if (newMode) setMode(newMode);\n  }, [newMode]);\n  return __jsx(ModeContext.Provider, {\n    value: {\n      mode,\n      setMode\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, children);\n}\nexport const useMode = () => useContext(ModeContext);","map":{"version":3,"sources":["/Users/monica/Dev/migrating-to-mdx/context/ModeContext.jsx"],"names":["createContext","useContext","useEffect","useState","useRouter","MODES","ModeContext","ModeProvider","children","mode","setMode","SLIDESHOW","router","newMode","query","useMode"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAGA,OAAO,MAAMC,WAAW,GAAGN,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,SAASO,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACvC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAACE,KAAK,CAACM,SAAP,CAAhC;AACA,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAaL,IAA7B;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,OAAJ,EAAaH,OAAO,CAACG,OAAD,CAAP;AAChB,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAKA,SACE,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF;AAKH;AAED,OAAO,MAAMO,OAAO,GAAG,MAAMd,UAAU,CAACK,WAAD,CAAhC","sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { MODES } from '../constants/modes'\n\n\nexport const ModeContext = createContext({})\n\nexport function ModeProvider({ children }) {\n    const [mode, setMode] = useState(MODES.SLIDESHOW)\n    const router = useRouter()\n    const newMode = router.query.mode\n\n    useEffect(() => {\n        if (newMode) setMode(newMode)\n    }, [newMode])\n\n\n    return (\n      <ModeContext.Provider value={{ mode, setMode }}>\n        {children}\n      </ModeContext.Provider>\n    )\n}\n\nexport const useMode = () => useContext(ModeContext)\n"]},"metadata":{},"sourceType":"module"}