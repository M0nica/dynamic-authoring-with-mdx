{"ast":null,"code":"import { useRef, useEffect } from 'react';\nexport default function useEventListener(eventName, handler) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n  // Create a ref that stores handler\n  var savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    // Make sure element supports addEventListener\n    // On\n    var isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    var eventListener = function eventListener(event) {\n      return savedHandler.current(event);\n    }; // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n\n    return function () {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}","map":{"version":3,"sources":["/Users/monica/Dev/migrating-to-mdx/hooks/useEventListener.js"],"names":["useRef","useEffect","useEventListener","eventName","handler","element","window","savedHandler","current","isSupported","addEventListener","eventListener","event","removeEventListener"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAAgE;AAAA,MAAlBC,OAAkB,uEAARC,MAAQ;AAC7E;AACA,MAAMC,YAAY,GAAGP,MAAM,EAA3B,CAF6E,CAI7E;AACA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CACP,YAAM;AACJ;AACA;AACA,QAAMQ,WAAW,GAAGJ,OAAO,IAAIA,OAAO,CAACK,gBAAvC;AACA,QAAI,CAACD,WAAL,EAAkB,OAJd,CAMJ;;AACA,QAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;AAAA,aAAWL,YAAY,CAACC,OAAb,CAAqBI,KAArB,CAAX;AAAA,KAAtB,CAPI,CASJ;;;AACAP,IAAAA,OAAO,CAACK,gBAAR,CAAyBP,SAAzB,EAAoCQ,aAApC,EAVI,CAYJ;;AACA,WAAO,YAAM;AACXN,MAAAA,OAAO,CAACQ,mBAAR,CAA4BV,SAA5B,EAAuCQ,aAAvC;AACD,KAFD;AAGD,GAjBM,EAkBP,CAACR,SAAD,EAAYE,OAAZ,CAlBO,CAkBc;AAlBd,GAAT;AAoBD","sourcesContent":["import { useRef, useEffect } from 'react'\n\nexport default function useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef()\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener\n      if (!isSupported) return\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = (event) => savedHandler.current(event)\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener)\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener)\n      }\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  )\n}\n"]},"metadata":{},"sourceType":"module"}