{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useCurrentSlide } from '../context/CurrentSlideContext';\nconst keys = {\n  slide: 'next-mdx-deck-slide',\n  page: 'next-mdx-deck-page'\n};\nexport const useStorage = () => {\n  const {\n    currentSlide,\n    setSlide\n  } = useCurrentSlide();\n  const router = useRouter();\n  const currentPage = router.query && 'slide' in router.query && parseInt(router.query.slide, 10);\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  /**\n   * Checks when user enters (focus) or\n   * leaves (blur) browser window/tab\n   */\n\n  const handleFocus = () => setFocused(true);\n\n  const handleBlur = () => setFocused(false);\n  /**\n   * Updates route or context with local storage data\n   * from event listener\n   * @param {*} e\n   */\n\n\n  const handleStorageChange = e => {\n    const n = parseInt(e.newValue, 10);\n    const syncedSlide = localStorage.getItem(keys.slide); // if (focused) return\n\n    if (Number.isNaN(n)) return;\n\n    switch (e.key) {\n      case keys.page:\n        router.push(`/slides/${parseInt(n, 10)}#${syncedSlide}`);\n        break;\n\n      case keys.slide:\n        window.location.hash = `#${n}`;\n        setSlide(n);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    setFocused(document.hasFocus());\n  }, []);\n  useEffect(() => {\n    if (!focused) window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('focus', handleFocus);\n    window.addEventListener('blur', handleBlur);\n    return () => {\n      if (!focused) window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [focused]);\n  /**\n   * Sync localstorage with changes to slides or pages\n   */\n\n  useEffect(() => {\n    if (!focused) return;\n    localStorage.setItem(keys.slide, currentSlide);\n    localStorage.setItem(keys.page, currentPage);\n  }, [focused, currentSlide, currentPage]);\n};\nexport const Storage = () => {\n  useStorage();\n  return false;\n};\nexport default useStorage;","map":{"version":3,"sources":["/Users/monica/Dev/migrating-to-mdx/hooks/useStorage.js"],"names":["useEffect","useState","useRouter","useCurrentSlide","keys","slide","page","useStorage","currentSlide","setSlide","router","currentPage","query","parseInt","focused","setFocused","handleFocus","handleBlur","handleStorageChange","e","n","newValue","syncedSlide","localStorage","getItem","Number","isNaN","key","push","window","location","hash","document","hasFocus","addEventListener","removeEventListener","setItem","Storage"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { useCurrentSlide } from '../context/CurrentSlideContext'\n\nconst keys = {\n  slide: 'next-mdx-deck-slide',\n  page: 'next-mdx-deck-page',\n}\n\nexport const useStorage = () => {\n  const { currentSlide, setSlide } = useCurrentSlide()\n  const router = useRouter()\n  const currentPage =\n    router.query && 'slide' in router.query && parseInt(router.query.slide, 10)\n  const [focused, setFocused] = useState(false)\n\n  /**\n   * Checks when user enters (focus) or\n   * leaves (blur) browser window/tab\n   */\n  const handleFocus = () => setFocused(true)\n  const handleBlur = () => setFocused(false)\n\n  /**\n   * Updates route or context with local storage data\n   * from event listener\n   * @param {*} e\n   */\n  const handleStorageChange = (e) => {\n    const n = parseInt(e.newValue, 10)\n    const syncedSlide = localStorage.getItem(keys.slide)\n    // if (focused) return\n    if (Number.isNaN(n)) return\n    switch (e.key) {\n      case keys.page:\n        router.push(`/slides/${parseInt(n, 10)}#${syncedSlide}`)\n        break\n      case keys.slide:\n        window.location.hash = `#${n}`\n        setSlide(n)\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    setFocused(document.hasFocus())\n  }, [])\n\n  useEffect(() => {\n    if (!focused) window.addEventListener('storage', handleStorageChange)\n    window.addEventListener('focus', handleFocus)\n    window.addEventListener('blur', handleBlur)\n    return () => {\n      if (!focused) window.removeEventListener('storage', handleStorageChange)\n      window.removeEventListener('focus', handleFocus)\n      window.removeEventListener('blur', handleBlur)\n    }\n  }, [focused])\n\n  /**\n   * Sync localstorage with changes to slides or pages\n   */\n  useEffect(() => {\n    if (!focused) return\n    localStorage.setItem(keys.slide, currentSlide)\n    localStorage.setItem(keys.page, currentPage)\n  }, [focused, currentSlide, currentPage])\n}\n\nexport const Storage = () => {\n  useStorage()\n  return false\n}\n\nexport default useStorage\n"]},"metadata":{},"sourceType":"module"}