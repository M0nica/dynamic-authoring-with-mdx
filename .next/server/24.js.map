{"version":3,"file":"24.js","sources":["webpack:///./README.md"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><img parentName=\"p\" {...{\n        \"src\": \"./screenshots/next-mdx-deck-example.gif\",\n        \"alt\": \"Presentation Mode\"\n      }}></img></p>\n    <h1>{`Next MDX Deck`}</h1>\n    <p>{`Create presentation decks using MDX, React, and `}<a parentName=\"p\" {...{\n        \"href\": \"https://nextjs.org/\"\n      }}>{`Next.js`}</a>{`.`}</p>\n    <h2>{`Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`üìΩ React-based Slideshow`}</li>\n      <li parentName=\"ul\">{`‚úçÔ∏è Write using Markdown, React components, even HTML!`}</li>\n      <li parentName=\"ul\">{`üé® Themeable with CSS vars or Styled Components`}</li>\n      <li parentName=\"ul\">{`üëâ Swipe to change slides`}</li>\n      <li parentName=\"ul\">{`‚ôªÔ∏è Sync slides between browser tabs`}</li>\n      <li parentName=\"ul\">{`üë®‚Äçüíª Presentation Mode`}</li>\n      <li parentName=\"ul\">{`üìù Speaker Notes`}</li>\n    </ul>\n    <h2>{`Getting Started`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Clone the project: `}<inlineCode parentName=\"li\">{`git clone https://github.com/whoisryosuke/next-mdx-deck`}</inlineCode></li>\n      <li parentName=\"ol\">{`Install dependencies: `}<inlineCode parentName=\"li\">{`npm i`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`yarn`}</inlineCode></li>\n      <li parentName=\"ol\">{`Run the dev server: `}<inlineCode parentName=\"li\">{`npm run dev`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`yarn dev`}</inlineCode></li>\n      <li parentName=\"ol\">{`Edit the first slide in `}<inlineCode parentName=\"li\">{`/slides/1.mdx`}</inlineCode>{` and save to `}<a parentName=\"li\" {...{\n          \"href\": \"http://localhost:3000/\"\n        }}><strong parentName=\"a\">{`see changes`}</strong></a>{`!`}</li>\n    </ol>\n    <p>{`When you're done, run `}<inlineCode parentName=\"p\">{`npm run build && npm run export`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn build && yarn export`}</inlineCode>{` will create a static app you can deploy anywhere (or use locally). See below for more details.`}</p>\n    <h3>{`Deploying`}</h3>\n    <p>{`This project is easy to build locally or using a host with build services (like Netlify or Now).`}</p>\n    <ol>\n      <li parentName=\"ol\">{`‚öôÔ∏è Run the build process: `}<inlineCode parentName=\"li\">{`npm run build && npm run export`}</inlineCode></li>\n      <li parentName=\"ol\">{`üöÄ Upload the static contents of `}<inlineCode parentName=\"li\">{`out`}</inlineCode>{` folder to host/CDN (or run the `}<inlineCode parentName=\"li\">{`out/index.html`}</inlineCode>{` locally)`}</li>\n    </ol>\n    <h2>{`How to Use`}</h2>\n    <h3>{`üí¨ Changing the Title/Date/etc`}</h3>\n    <p>{`The default theme includes a title, date, author (and link to the author's website) in of the `}<inlineCode parentName=\"p\">{`<Header>`}</inlineCode>{` component. You can edit this data inside the `}<inlineCode parentName=\"p\">{`site.config.js`}</inlineCode>{` file. `}</p>\n    <h3>{`‚úçÔ∏è Writing JSX`}</h3>\n    <p>{`You can use JSX in `}<a parentName=\"p\" {...{\n        \"href\": \"https://mdxjs.com/getting-started\"\n      }}>{`a few ways`}</a>{` in your MDX files:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You can use the syntax with HTML (`}<inlineCode parentName=\"li\">{`<button style={{ color: \"red\" }}>`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`You can import React component from other files (`}<inlineCode parentName=\"li\">{`import Button from \"../components/Button\"`}</inlineCode>{`). Then you can use that component anywhere in that MDX file. The path to the component is relative to the MDX file.`}</li>\n      <li parentName=\"ul\">{`You can use any React component imported into the `}<inlineCode parentName=\"li\">{`<MDXProvider>`}</inlineCode>{` (inside `}<inlineCode parentName=\"li\">{`/components/MDXProvider.js`}</inlineCode>{`). This allows you to use the component without importing it inside each MDX file.`}</li>\n      <li parentName=\"ul\">{`You can define React components inside MDX files and then use them. MDX supports the use of JS inside files, like exporting variables, or in this case ‚Äî defining new functions. `}<inlineCode parentName=\"li\">{`const Button = () => <button style={{ color: \"red\" }}>`}</inlineCode></li>\n    </ul>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://mdxjs.com/getting-started\"\n      }}>{`Check out the MDX docs`}</a>{` for more information on the syntax.`}</p>\n    <h3>{`üìÉ Creating Slide Pages`}</h3>\n    <p>{`Slide pages are incremental, starting at 1. If you need a new page, create a new MDX file that is named one number higher than the last page (e.g. `}<inlineCode parentName=\"p\">{`3.mdx`}</inlineCode>{` if there's 2 pages).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Pages must be integers and incremental, but you can change the starting slide by editing the redirect in `}<inlineCode parentName=\"p\">{`/pages/index.jsx`}</inlineCode>{` (e.g. `}<inlineCode parentName=\"p\">{`router.replace('/slides/420')`}</inlineCode>{`)`}</p>\n    </blockquote>\n    <h3>{`üé® Theming the Slideshow`}</h3>\n    <p>{`Theming is accomplished with `}<strong parentName=\"p\">{`CSS custom properties`}</strong>{` and/or `}<strong parentName=\"p\">{`Styled Components`}</strong>{`. `}</p>\n    <p>{`Design tokens are stored as CSS custom properties inside the SlidePage layout (`}<inlineCode parentName=\"p\">{`/layouts/SlidePage.jsx`}</inlineCode>{`), which are injected into the app using Styled Component's global styling utility. There you can change the color of text, background colors, fonts, etc.`}</p>\n    <p>{`The actual CSS styles of the Slideshow are also stored in the SlidePage layout. There you can change the padding of slides, alignment of quotes, etc.`}</p>\n    <p>{`When the Markdown is parsed into HTML, you can replace HTML with React components. These \"swaps\" are handled by the `}<inlineCode parentName=\"p\">{`<MDXProvider>`}</inlineCode>{` component. You can import custom components and swap elements (like a `}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{`), or import components to use inside MDX (great for creating things like 2-col layouts with component). There you can change the syntax highlighting or find any custom MDX components. It's recommended to use Styled Components there to create custom components.`}</p>\n    <h2>{`Presentation Mode`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"./screenshots/next-mdx-deck-presentation.png\",\n        \"alt\": \"Presentation Mode\"\n      }}></img></p>\n    <p>{`Presentation mode allows you to view the current slide alongside any `}<strong parentName=\"p\">{`\"speaker notes\"`}</strong>{` included inside the slide.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Press `}<inlineCode parentName=\"li\">{`ALT/OPT + P`}</inlineCode>{` to toggle presentation mode on and off.`}</li>\n      <li parentName=\"ul\">{`You can also add the `}<inlineCode parentName=\"li\">{`mode`}</inlineCode>{` query parameter to the URL (e.g. `}<inlineCode parentName=\"li\">{`http://localhost:3000/slides/1?mode=presentation`}</inlineCode>{`).`}</li>\n    </ul>\n    <p>{`The most common way to use presentation mode:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Open two browser tabs with any slide page.`}</li>\n      <li parentName=\"ol\">{`Activate presentation mode in one tab.`}</li>\n      <li parentName=\"ol\">{`Navigate through slides - they'll be synced in both tabs!`}</li>\n    </ol>\n    <p>{`This way you can view your presentation on one monitor, while displaying the slides on another screen. Or if you're livestreaming, you can capture the slideshow window in software like OBS, and view the presentation window privately.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that syncing between tabs is achieved using `}<inlineCode parentName=\"p\">{`localStorage`}</inlineCode>{`. If you want to use an \"Incognito\" browser, make sure both tabs are \"incognito\" or they won't sync.`}</p>\n    </blockquote>\n    <h3>{`Speaker Notes`}</h3>\n    <p>{`Speaker notes are only displayed during presentation mode. This allows you to write private notes to yourself that you can see in \"presentation\" mode, while the audience only sees the other slide content in \"slideshow\" mode.`}</p>\n    <p>{`Speaker notes can contain `}<strong parentName=\"p\">{`Markdown`}</strong>{`, `}<strong parentName=\"p\">{`MDX/JSX`}</strong>{`, and even `}<strong parentName=\"p\">{`HTML`}</strong>{` `}<em parentName=\"p\">{`(as JSX)`}</em>{`. The notes are displayed in a scrollable window to the side of slide content during \"presenation\" mode.`}</p>\n    <p>{`To create speaker notes, you use the `}<inlineCode parentName=\"p\">{`<SpeakerNotes>`}</inlineCode>{` component inside of your MDX files. No need to import it, it's `}<a parentName=\"p\" {...{\n        \"href\": \"components/MDXProvider.jsx\"\n      }}>{`automatically imported into any MDX slide page`}</a>{`. You can also use it multiple times within the same slide, all the notes (per slide) will be combined. `}</p>\n    <p>{`Here's an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdx\"\n      }}>{`Slide content would go here.\n\n<SpeakerNotes>\n    \nPrivate notes here. \n\n# Even Markdown!\n\n</SpeakerNotes>\n`}</code></pre>\n    <h3>{`Adding/replacing components in MDX`}</h3>\n    <p>{`MDX allows you to use JSX inline or import components, but if you want to use a React component across all slides without importing it, you can use the `}<inlineCode parentName=\"p\">{`<MDXProvider>`}</inlineCode>{` component. This component wraps the app in a \"context\" that provides MDX with components to pass into the parser. `}</p>\n    <p>{`This also lets you replace Markdown parsed HTML elements with React components, like replacing `}<inlineCode parentName=\"p\">{`## Headings`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`<Heading as=\"h2\">`}</inlineCode>{` instead of the default `}<inlineCode parentName=\"p\">{`<h2>`}</inlineCode>{`. This comes in handy if you have a React component library and you want to use it's primitives like `}<inlineCode parentName=\"p\">{`<Text>`}</inlineCode>{` for paragraphs.`}</p>\n    <p>{`You can pass new components, or swap HTML elements inside the `}<inlineCode parentName=\"p\">{`mdComponents`}</inlineCode>{` object in the `}<inlineCode parentName=\"p\">{`/components/MDXProvider.jsx`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const mdComponents = {\n  h1: (props) => <h1 {...props} />,\n  CustomButton,\n}\n`}</code></pre>\n    <h2>{`Learn More`}</h2>\n    <h3>{`MDX`}</h3>\n    <p>{`To learn more about `}<strong parentName=\"p\">{`MDX`}</strong>{`, take a look at the following resources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://mdxjs.com/\"\n        }}>{`MDX Documentation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://mdxjs.com/getting-started\"\n        }}>{`Getting started with MDX`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://mdxjs.com/getting-started/next\"\n        }}>{`Using MDX with Next.js`}</a></li>\n    </ul>\n    <h3>{`Next.js`}</h3>\n    <p>{`To learn more about `}<strong parentName=\"p\">{`Next.js`}</strong>{`, take a look at the following resources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://nextjs.org/docs\"\n        }}>{`Next.js Documentation`}</a>{` - learn about Next.js features and API.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://nextjs.org/learn\"\n        }}>{`Learn Next.js`}</a>{` - an interactive Next.js tutorial.`}</li>\n    </ul>\n    <h3>{`References`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/jxnblk/mdx-deck/blob/master/packages/gatsby-theme/src/hooks/use-storage.js\"\n        }}>{`MDX Deck`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.gatsbyjs.org/starters/fabe/gatsby-starter-deck/\"\n        }}>{`Gatsby Starter Deck`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/conorhastings/react-syntax-highlighter\"\n        }}>{`react-syntax-highlighter`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAGA;AAFA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;;;;A","sourceRoot":""}