{"version":3,"file":"static/chunks/14.js","sources":["webpack:///./context/CurrentSlideContext.jsx","webpack:///./hooks/useStorage.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react'\n\nexport const CurrentSlideContext = createContext({\n  currentSlide: 0,\n  setSlide: () => {},\n})\n\nexport function CurrentSlideProvider({ children }) {\n  // Grab initial slide from hash (#) in URL\n  const initialSlide =\n    process.browser && window.location.hash\n      ? parseInt(window.location.hash.replace('#', ''))\n      : 0\n  const [currentSlide, setSlide] = useState(initialSlide)\n\n  return (\n    <CurrentSlideContext.Provider value={{ currentSlide, setSlide }}>\n      {children}\n    </CurrentSlideContext.Provider>\n  )\n}\n\nexport const useCurrentSlide = () => useContext(CurrentSlideContext)\n","import { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { useCurrentSlide } from '../context/CurrentSlideContext'\n\nconst keys = {\n  slide: 'next-mdx-deck-slide',\n  page: 'next-mdx-deck-page',\n}\n\nexport const useStorage = () => {\n  const { currentSlide, setSlide } = useCurrentSlide()\n  const router = useRouter()\n  const currentPage =\n    router.query && 'slide' in router.query && parseInt(router.query.slide, 10)\n  const [focused, setFocused] = useState(false)\n\n  /**\n   * Checks when user enters (focus) or\n   * leaves (blur) browser window/tab\n   */\n  const handleFocus = () => setFocused(true)\n  const handleBlur = () => setFocused(false)\n\n  /**\n   * Updates route or context with local storage data\n   * from event listener\n   * @param {*} e\n   */\n  const handleStorageChange = (e) => {\n    const n = parseInt(e.newValue, 10)\n    const syncedSlide = localStorage.getItem(keys.slide)\n    // if (focused) return\n    if (Number.isNaN(n)) return\n    switch (e.key) {\n      case keys.page:\n        router.push(`/slides/${parseInt(n, 10)}#${syncedSlide}`)\n        break\n      case keys.slide:\n        window.location.hash = `#${n}`\n        setSlide(n)\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    setFocused(document.hasFocus())\n  }, [])\n\n  useEffect(() => {\n    if (!focused) window.addEventListener('storage', handleStorageChange)\n    window.addEventListener('focus', handleFocus)\n    window.addEventListener('blur', handleBlur)\n    return () => {\n      if (!focused) window.removeEventListener('storage', handleStorageChange)\n      window.removeEventListener('focus', handleFocus)\n      window.removeEventListener('blur', handleBlur)\n    }\n  }, [focused])\n\n  /**\n   * Sync localstorage with changes to slides or pages\n   */\n  useEffect(() => {\n    if (!focused) return\n    localStorage.setItem(keys.slide, currentSlide)\n    localStorage.setItem(keys.page, currentPage)\n  }, [focused, currentSlide, currentPage])\n}\n\nexport const Storage = () => {\n  useStorage()\n  return false\n}\n\nexport default useStorage\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAFA;AAKA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}